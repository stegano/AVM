/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ./component/Display */ 1);
	__webpack_require__(/*! ./component/Payment */ 5);
	__webpack_require__(/*! ./component/Console */ 8);
	


/***/ },
/* 1 */
/*!************************************!*\
  !*** ./component/Display/index.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var View = __webpack_require__(/*! ../../lib/framework/View */ 2);
	var Utils = __webpack_require__(/*! ../../lib/utils */ 3);
	var model = __webpack_require__(/*! ./model */ 4);
	/**
	 * 판매 상품을 보여주는 뷰 컴포넌트
	 * @namespace Display
	 * */
	var Display = new View({
	  componentElementId: "display",
	  model: model,
	  initialize: function () {
	    var that = this;
	    this.itemTemplate = Utils.template(Utils.$("#DisplayItemTemplate").innerHTML);
	    /**
	     * 모델 이벤트 바인딩
	     * */
	    this.model.on("change:items", function (items) {
	      that.render(items);
	    });
	    /**
	     * 기본 설정으로 아이템 생성
	     * */
	    this.model.set({
	      items: this.genItems(null, 100, 800, 1, 3)
	    });
	  },
	  /**
	   * 아이템 정보를 생성
	   * @memberOf Display
	   * @param {String[]} itemNames 아이템 이름
	   * @param {Number} minPrice 최소 가격
	   * @param {Number} maxPrice 최대 가격
	   * @param {Number} minCount 최소 갯수
	   * @param {Number} maxCount 최대 갯수
	   * @return {Object[]} items 랜덤 순서, 랜덤 가격, 랜덤 갯수로 생성된 아이템 배열
	   * */
	  genItems: function (itemNames, minPrice, maxPrice, minCount, maxCount) {
	    var _itemNames = itemNames instanceof Array ? itemNames : [
	      "펩시",
	      "V10",
	      "거름",
	      "맹물",
	      "환타",
	      "식혜",
	      "국물",
	      "박카스"
	    ];
	    var _minPrice = Number(minPrice) || 100;
	    var _maxPrice = Number(maxPrice) || 800;
	    var _minCount = Number(minCount) || 1;
	    var _maxCount = Number(maxCount) || 3;
	    var ret = [];
	    for (var name, price, count, len = _itemNames.length, i = 0; i < len; i++) {
	      name = _itemNames.splice(Utils.genRandomValue(0, _itemNames.length - 1), 1)[0];
	      price = Math.round(Utils.genRandomValue(_minPrice, _maxPrice) / 100) * 100;
	      count = Utils.genRandomValue(_minCount, _maxCount);
	      ret.push({
	        name: name,
	        price: price,
	        count: count
	      });
	    }
	    return ret;
	  },
	  /**
	   * 아이템을 그림
	   * @memberOf Display
	   * @param {Object[]} items 아이템 정보
	   * @return {Object} View
	   * */
	  render: function (items) {
	    var $$root = Utils.$("#" + this.componentElementId + "> .items")[0];
	    var chunk = [];
	    for (var item, i = 0, len = items.length; i < len; i++) {
	      item = items[i];
	      chunk.push(
	        this.itemTemplate({
	          productName: item.name,
	          price: item.price,
	          count: item.count
	        })
	      );
	    }
	    $$root.innerHTML = chunk.join("");
	    return this;
	  }
	});
	
	module.exports = Display;


/***/ },
/* 2 */
/*!*******************************!*\
  !*** ./lib/framework/View.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * 컴포넌트를 구조적으로 사용하고 관리하기 위한 뷰 객체
	 * @constructor
	 * */
	var View = function (options, property) {
	  var _options = options || {};
	  if ("initialize" in _options && typeof _options.initialize === "function") {
	    options.initialize(property);
	  }
	};
	
	module.exports = View;


/***/ },
/* 3 */
/*!****************************!*\
  !*** ./lib/utils/index.js ***!
  \****************************/
/***/ function(module, exports) {

	var Utils = {
	  /**
	   * 간단한 템플릿 엔진
	   * @param {String} htmlString
	   * @return {Function} replaceTemplateData
	   * */
	  template: function (htmlString) {
	    var _htmlTemplate = htmlString.replace(/^\s*|\s*/gm, "");
	    /**
	     * @param {Object} data 치환할 데이터
	     * */
	    return function replaceTemplateData(data) {
	      var ret = _htmlTemplate;
	      for (var n in data) {
	        ret = ret.replace(new RegExp("{{=" + n + "}}", "gm"), data[n]);
	      }
	      return ret;
	    };
	  },
	  /**
	   * `querySelector`를 좀 더 편하게 사용하기 위한 함수
	   * @param {String} querySelector 셀렉터
	   * @return {HTMLElement}
	   * */
	  $: function (querySelector) {
	    var ret = null;
	    var fragments = querySelector.split(" ");
	    if (fragments[fragments.length - 1][0] === "#") {
	      ret = document.querySelector(querySelector);
	    } else {
	      ret = document.querySelectorAll(querySelector);
	    }
	    return ret;
	  },
	  /**
	   * 숫자에 콤마 추가
	   * */
	  comma: function (number) {
	    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
	  },
	  /**
	   * 랜덤 숫자 생성
	   * @param {number} min 최소 값
	   * @param {number} max 최대 값
	   * @return {number} `min ~ max` 사이의 정수
	   * */
	  genRandomValue: function (min, max) {
	    return parseInt(Math.random() * (max - min + 1) + min, 10);
	  }
	};
	
	module.exports = Utils;


/***/ },
/* 4 */
/*!************************************!*\
  !*** ./component/Display/model.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var Model = __webpack_require__(/*! ../../lib/framework/Model */ 7);
	/**
	 * 판매 상품을 보여주는 뷰의 모델
	 * @namespace DisplayModel
	 * */
	var DisplayModel = new Model({
	  items: []
	});
	module.exports = DisplayModel;


/***/ },
/* 5 */
/*!************************************!*\
  !*** ./component/Payment/index.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var View = __webpack_require__(/*! ../../lib/framework/View */ 2);
	var Utils = __webpack_require__(/*! ../../lib/utils */ 3);
	var model = __webpack_require__(/*! ./model */ 6);
	/**
	 * 판매 상품을 보여주는 뷰 컴포넌트
	 * @namespace Payment
	 * */
	var Payment = new View({
	  componentElementId: "payment",
	  model: model,
	  initialize: function () {
	    var that = this;
	    /**
	     * 모델 이벤트 바인딩
	     * */
	    this.model.on("change:myAccount", function (account) {
	      that.renderUpdateMyAccount(account);
	    });
	    this.model.on("change:deposit", function (deposit) {
	      that.renderUpdateDeposit(deposit);
	    });
	    /**
	     * 현재 가진 금액을 `10,000`으로 초기화
	     * */
	    this.model.set({
	      myAccount: 10000
	    });
	  },
	  /**
	   * 현재 소유한 금액을 업데이트
	   * @memberOf Payment
	   * @param {Number} account
	   * @return {Object} Payment
	   * */
	  renderUpdateMyAccount: function (account) {
	    Utils.$("#myAccount > .amount")[0].innerText = Utils.comma(account);
	    return this;
	  },
	  /**
	   * 현재 넣은 금액을 업데이트
	   * @memberOf Payment
	   * @return {Object} Payment
	   * */
	  renderUpdateDeposit: function (account) {
	    Utils.$("#deposit > .amount")[0].innerText = Utils.comma(account);
	    return this;
	  }
	});
	
	module.exports = Payment;


/***/ },
/* 6 */
/*!************************************!*\
  !*** ./component/Payment/model.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var Model = __webpack_require__(/*! ../../lib/framework/Model */ 7);
	/**
	 * 판매 상품을 보여주는 뷰의 모델
	 * @namespace PaymentModel
	 * */
	var PaymentModel = new Model({
	  myAccount: 0,
	  deposit: 0
	});
	module.exports = PaymentModel;


/***/ },
/* 7 */
/*!********************************!*\
  !*** ./lib/framework/Model.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * 데이터를 관리하기 위한 모델, 이벤트를 바인딩하여 데이터의 변경을 감지(`Pub/Sub 패턴`)
	 * @constructor
	 * */
	var Model = function (defaults) {
	  var modelData = defaults || {};
	  var events = {};
	  /**
	   * 데이터를 변경
	   * @param {String} newData 새로운 데이터
	   * @param {Object} options 옵션
	   * @return {Object} Model 모델
	   * */
	  this.set = function (newData, options) {
	    var _options = options || {
	      silent: false,
	      trigger: false
	    };
	    var changeEvents = null;
	    var isNewState = false;
	    /**
	     * 모델의 변경을 검사
	     * */
	    for (var n in newData) {
	      if (modelData[n] !== newData[n] || _options.trigger === true) {
	        isNewState = true;
	        changeEvents = events["change:" + n] || [];
	        modelData[n] = newData[n];
	        for (var i = 0, len = changeEvents.length; i < len; i++) {
	          changeEvents[i].call(this, newData[n]);
	        }
	      }
	    }
	    /**
	     * 모델의 데이터가 하나라도 변경된 경우
	     * */
	    if ((isNewState && _options.silent !== true) || _options.trigger === true) {
	      changeEvents = events["change"] || [];
	      for (var i = 0, len = changeEvents.length; i < len; i++) {
	        changeEvents[i].call(this, modelData);
	      }
	    }
	    return this;
	  };
	  /**
	   * 데이터를 가져옴.
	   * @param {String} key 키 값
	   * @return {Object} 데이터
	   * */
	  this.get = function (key) {
	    return modelData[key];
	  };
	  /**
	   * 이벤트 바인딩
	   * @param {String} eventName 이벤트 이름
	   * @param {Function} callback 콜백함수
	   * @return {Function} callback 콜백함수
	   * */
	  this.on = function (eventName, callback) {
	    if (!events[eventName]) {
	      events[eventName] = [];
	    }
	    events[eventName].push(callback);
	    return callback;
	  };
	  /**
	   * 이벤트 바인딩 제거
	   * @param {String} eventName 이벤트 이름
	   * @param {Function} callback 콜백함수
	   * @return {Object} Model 모델
	   * */
	  this.off = function (eventName, callback) {
	    if (eventName) {
	      var registeredEvents = events[eventName];
	      if (registeredEvents) {
	        for (var eventItem, len = registeredEvents.length, i = 0; i < len; i++) {
	          eventItem = registeredEvents[i];
	          if (eventItem === callback) {
	            events[eventName].splice(i, 1);
	          }
	        }
	      }
	    } else {
	      /**
	       * clear
	       * */
	      events = {};
	    }
	    return this;
	  };
	  /**
	   * @private
	   * */
	  this._getRawData = function () {
	    return modelData;
	  };
	  /**
	   * @private
	   * */
	  this._getEvents = function () {
	    return events;
	  };
	};
	
	/**
	 * 데이터를 변경
	 * @param {String} newData 새로운 데이터
	 * @param {Object} options 옵션
	 * @return {Object} Model 모델
	 * */
	this.set = function (newData, options) {
	  var _options = options || {
	    silent: false,
	    trigger: false
	  };
	  var changeEvents = null;
	  var isNewState = false;
	  /**
	   * 모델의 변경을 검사
	   * */
	  for (var n in newData) {
	    if (modelData[n] !== newData[n] || _options.trigger === true) {
	      isNewState = true;
	      changeEvents = events["change:" + n] || [];
	      modelData[n] = newData[n];
	      for (var i = 0, len = changeEvents.length; i < len; i++) {
	        changeEvents[i].call(this, newData[n]);
	      }
	    }
	  }
	  /**
	   * 모델의 데이터가 하나라도 변경된 경우
	   * */
	  if ((isNewState && _options.silent !== true) || _options.trigger === true) {
	    changeEvents = events["change"] || [];
	    for (var i = 0, len = changeEvents.length; i < len; i++) {
	      changeEvents[i].call(this, modelData);
	    }
	  }
	  return this;
	};
	/**
	 * 데이터를 가져옴.
	 * @param {String} key 키 값
	 * @return {Object} 데이터
	 * */
	this.get = function (key) {
	  return modelData[key];
	};
	/**
	 * 이벤트 바인딩
	 * @param {String} eventName 이벤트 이름
	 * @param {Function} callback 콜백함수
	 * @return {Function} callback 콜백함수
	 * */
	this.on = function (eventName, callback) {
	  if (!events[eventName]) {
	    events[eventName] = [];
	  }
	  events[eventName].push(callback);
	  return callback;
	};
	/**
	 * 이벤트 바인딩 제거
	 * @param {String} eventName 이벤트 이름
	 * @param {Function} callback 콜백함수
	 * @return {Object} Model 모델
	 * */
	this.off = function (eventName, callback) {
	  if (eventName) {
	    var registeredEvents = events[eventName];
	    if (registeredEvents) {
	      for (var eventItem, len = registeredEvents.length, i = 0; i < len; i++) {
	        eventItem = registeredEvents[i];
	        if (eventItem === callback) {
	          events[eventName].splice(i, 1);
	        }
	      }
	    }
	  } else {
	    /**
	     * reset events
	     * */
	    events = {};
	  }
	  return this;
	};
	
	module.exports = Model;


/***/ },
/* 8 */
/*!************************************!*\
  !*** ./component/Console/index.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var View = __webpack_require__(/*! ../../lib/framework/View */ 2);
	var Utils = __webpack_require__(/*! ../../lib/utils */ 3);
	var model = __webpack_require__(/*! ./model */ 9);
	/**
	 * 판매 상품을 보여주는 뷰 컴포넌트
	 * @namespace Console
	 * */
	var Console = new View({
	  componentElementId: "console",
	  model: model,
	  initialize: function () {
	    var that = this;
	    this.itemTemplate = Utils.template(Utils.$("#ConsoleLogItemTemplate").innerHTML);
	    /**
	     * 모델 이벤트 바인딩
	     * */
	    this.model.on("change:log", function (log) {
	      that.renderNewLog(log);
	      that.setScrollBottom();
	    });
	  },
	  /**
	   * 최근 입력된 로그를 추가
	   * @memberOf Console
	   * @param {String} log
	   * @return {View} Console
	   * */
	  renderNewLog: function (log) {
	    var $console = Utils.$("#console .items")[0];
	    var logs = $console.innerHTML + this.itemTemplate({
	        logMessage: log
	      });
	    $console.innerHTML = logs;
	    return this;
	  },
	  /**
	   * 스크롤 최하단으로 이동
	   * @memberOf Console
	   * @return {View} Console
	   * */
	  setScrollBottom: function () {
	    var $consoleWrapper = Utils.$("#" + this.componentElementId);
	    $consoleWrapper.scrollTop = $consoleWrapper.scrollHeight;
	    return this;
	  }
	});
	
	module.exports = Console;


/***/ },
/* 9 */
/*!************************************!*\
  !*** ./component/Console/model.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var Model = __webpack_require__(/*! ../../lib/framework/Model */ 7);
	/**
	 * 로그 정보를 관리하는 모델
	 * @namespace ConsoleModel
	 * */
	var ConsoleModel = new Model({
	  log: null
	});
	module.exports = ConsoleModel;


/***/ }
/******/ ]);
//# sourceMappingURL=index.min.js.map